import javax.swing.tree.TreeNode;
import java.util.*;

/**
 * @ClassName Test1124
 * @Desc TODO
 * @Auther 28893
 * @Date 2019/11/24  10:34
 * @Veresion 1.0
 */
public class Test1124 {
    //火车进站
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNext()){
            int num = sc.nextInt();
            int[] A = new int[num];
            for(int i=0;i<num;i++){
                A[i] = sc.nextInt();
            }
            int start = 0;
            ArrayList<int[]> result = new ArrayList<>();
            Permutation(A,start,num,result);
            Set<String> sortResult = new TreeSet<>();
            for(int[] out:result){
                if(isLegal(A,out,num)){
                    StringBuilder sb = new StringBuilder();
                    for(int i=0;i<num-1;i++){
                        sb.append(out[i]+" ");
                    }
                    sb.append(out[num-1]);
                    sortResult.add(sb.toString());
                }
            }
            for(String list:sortResult){
                System.out.println(list);
            }
        }
        sc.close();
    }
    private static boolean isLegal(int[] in,int[] out,int n){
        Stack<Integer> stack = new Stack<>();
        int i=0;
        int j=0;
        while(i<n){
            if(in[i]==out[j]){
                i++;
                j++;
            }else{
                if(stack.isEmpty()){
                    stack.push(in[i]);
                    i++;
                }else{
                    int top = stack.peek();
                    if(top==out[j]){
                        j++;
                        stack.pop();
                    }else if(i<n){
                        stack.push(in[i]);
                        i++;
                    }
                }
            }
        }
        while(!stack.isEmpty()&&j<n){
            int top = stack.pop();
            if(top==out[j]){
                j++;
            }else{
                return false;
            }
        }
        return true;
    }
    private static void Permutation(int[] A,int start,int n,ArrayList<int[]> result){
        if(start==n){
            return;
        }
        if(start==n-1){//存储最后的数据
            int[] B = A.clone();
            result.add(B);
            return;
        }
        for(int i=start;i<n;i++){
            swap(A,start,i);
            Permutation(A,start+1,n,result);
            swap(A,start,i);
        }
    }
    private static void swap(int[] A,int i,int j){
        int t = A[i];
        A[i]=A[j];
        A[j]=t;
    }
   //二叉树的镜像
   /* static class TreeNode {
        int val = 0;
        TreeNode left = null;
        TreeNode right = null;
        public TreeNode(int val) {
            this.val = val;
        }

    }
   public void Mirror(TreeNode root){
        if(root==null){
            return ;
        }
        if(root.left==null&&root.right==null){
            return;
        }
        TreeNode temp=root.left;
        root.left=root.right;
        root.right=temp;
        if(root.right!=null){
            Mirror(root.right);
        }
        if(root.left!=null){
            Mirror(root.left);
        }
   }*/
}
