import org.omg.PortableInterceptor.INACTIVE;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/**
 * @ClassName Test1117
 * @Desc TODO
 * @Auther 28893
 * @Date 2019/11/17  13:30
 * @Veresion 1.0
 */
public class Test1117 {
    //个位数统计 输入的是一个不超过1000位的正整数
  /*  public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        NumTime(sc.nextLine());
    }

    private static void NumTime(String n) {
        Map<Integer,Integer> map=new HashMap<>();
        int len=n.length();
        int [] arr=new int[n.length()];
        int i=0;
        for(i=0;i<arr.length;i++){
            arr[i]=n.charAt(i)-'0';
        }
        i=0;
        while(i<arr.length){
            int time=map.getOrDefault(arr[i],0);
            map.put(arr[i],time+1);
            i++;
        }
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            System.out.println(entry.getKey()+":"+entry.getValue());
        }
    }*/
    //构建乘积数组
    public static int[] multiply(int[] A) {
        int[] result=new int[A.length];
        Arrays.fill(result,1);
        for(int i=0;i<A.length;i++){
            for(int j=i+1;j<A.length;j++){
                result[i]*=A[j];
            }
            for(int k=0;k<i;k++){
                result[i]*=A[k];
            }
        }
        return result;
    }

    public static void main(String[] args) {
        int[] s={1,2,3,4};
        int[] result=multiply(s);
        for(int i=0;i<result.length;i++){
            System.out.println(result[i]);
        }
    }
}
